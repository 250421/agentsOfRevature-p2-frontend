/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicSignUpImport } from './routes/(public)/sign-up'
import { Route as publicSignInImport } from './routes/(public)/sign-in'
import { Route as publicLayoutImport } from './routes/(public)/_layout'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const publicSignUpRoute = publicSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => publicRoute,
} as any)

const publicSignInRoute = publicSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => publicRoute,
} as any)

const publicLayoutRoute = publicLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => publicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_layout': {
      id: '/(public)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicLayoutImport
      parentRoute: typeof publicRoute
    }
    '/(public)/sign-in': {
      id: '/(public)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof publicSignInImport
      parentRoute: typeof publicImport
    }
    '/(public)/sign-up': {
      id: '/(public)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof publicSignUpImport
      parentRoute: typeof publicImport
    }
  }
}

// Create and export the route tree

interface publicRouteChildren {
  publicLayoutRoute: typeof publicLayoutRoute
  publicSignInRoute: typeof publicSignInRoute
  publicSignUpRoute: typeof publicSignUpRoute
}

const publicRouteChildren: publicRouteChildren = {
  publicLayoutRoute: publicLayoutRoute,
  publicSignInRoute: publicSignInRoute,
  publicSignUpRoute: publicSignUpRoute,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicLayoutRoute
  '/sign-in': typeof publicSignInRoute
  '/sign-up': typeof publicSignUpRoute
}

export interface FileRoutesByTo {
  '/': typeof publicLayoutRoute
  '/sign-in': typeof publicSignInRoute
  '/sign-up': typeof publicSignUpRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_layout': typeof publicLayoutRoute
  '/(public)/sign-in': typeof publicSignInRoute
  '/(public)/sign-up': typeof publicSignUpRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/sign-up'
  id:
    | '__root__'
    | '/(public)'
    | '/(public)/_layout'
    | '/(public)/sign-in'
    | '/(public)/sign-up'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(public)"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_layout",
        "/(public)/sign-in",
        "/(public)/sign-up"
      ]
    },
    "/(public)/_layout": {
      "filePath": "(public)/_layout.tsx",
      "parent": "/(public)"
    },
    "/(public)/sign-in": {
      "filePath": "(public)/sign-in.tsx",
      "parent": "/(public)"
    },
    "/(public)/sign-up": {
      "filePath": "(public)/sign-up.tsx",
      "parent": "/(public)"
    }
  }
}
ROUTE_MANIFEST_END */
